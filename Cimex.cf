-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [Stmt];

separator  Stmt ";" ;

-- statements ----------------------------------------------

FnDef.	   Stmt ::= Type Ident "(" [Arg] ")" Block ;

ArgVal.    Arg ::= Type Ident ;

ArgRef.    Arg ::= Type "&" Ident ;

separator  Arg "," ;

Block.     Block ::= ":" "{" [Stmt] "}" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Decl.      Stmt ::= Type [Item] ;

NoInit.    Item ::= Ident ; 

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

VarAss.    Stmt ::= Ident "=" Expr ;

ArrElAss.  Stmt ::= Ident [ArrArg] "=" Expr ;

ArrIdx.    ArrArg ::= "[" Expr "]" ;

separator nonempty ArrArg "" ;

Ret.       Stmt ::= "return" Expr ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

Break.     Stmt ::= "break" ;

Cont.      Stmt ::= "continue" ;

Print.     Stmt ::= "print" "(" Expr ")" ;

SExp.      Stmt ::= Expr ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "bool" ;

Arr.       Type ::= Type "[]" ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ECrtArr.   Expr6 ::= "new" Type [ArrArg] ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EArrGet.   Expr6 ::= Ident [ArrArg] ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "//" ;

comment    "/*" "*/" ;

-- layout ------------------------------------------------

layout     ":" ;
layout     toplevel ;