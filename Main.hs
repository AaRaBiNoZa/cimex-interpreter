-- File (partly) generated by the BNF Converter (bnfc 2.9.4.1).

module Main where

import Prelude
  ( ($), (.)
  , Bool(..)
  , Either(..)
  , Int, (>)
  , String, (++), concat, unlines
  , Show, show
  , IO, (>>), (>>=), mapM_, putStrLn
  , FilePath
  , getContents, readFile
  , return
  )
import System.Environment ( getArgs )
import System.IO          ( hPutStrLn, stderr )
import System.Exit        ( exitFailure )
import Control.Monad      ( when )

import Cimex.Abs    ( Program )
import Cimex.Layout ( resolveLayout )
import Cimex.Lex    ( Token, mkPosToken )
import Cimex.Par    ( pProgram, myLexer )
import Cimex.Print  ( Print, printTree )
import Cimex.Skel   ()

import qualified TypeChecker as T
import qualified Interpreter as I

type Err        = Either String
type ParseFun a = [Token] -> Err a
type Verbosity  = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: Verbosity -> ParseFun Program -> FilePath -> IO ()
runFile v p f = readFile f >>= run v p

run :: Verbosity -> ParseFun Program -> String -> IO ()
run v p s =
  case p ts of
    Left err -> do
      hPutStrLn stderr  "\nParse              Failed...\n"
      hPutStrLn stderr err
      exitFailure
    Right tree -> do
      case T.runTypeCheck tree of
        Left err -> hPutStrLn stderr ("Static analysis error: " ++ T.showErr err) >> exitFailure
        Right _ -> do
          runRes <- I.runProgram tree
          case runRes of
            Left err -> hPutStrLn stderr ("Runtime error: " ++ I.showErr err) >> exitFailure
            Right _ -> return ()
      showTree v tree
  where
  ts = resolveLayout True $ myLexer s
  showPosToken ((l,c),t) = concat [ show l, ":", show c, "\t", show t ]

showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree = do
  putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
  putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin silently."
    , "  (files)         Parse content of files silently."
    , "  -v (files)      Verbose mode. Parse content of files verbosely."
    ]

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    []         -> getContents >>= run 0 pProgram
    "-v":fs    -> mapM_ (runFile 2 pProgram) fs
    fs         -> mapM_ (runFile 0 pProgram) fs

